{
  "name": "pgstream",
  "commands": [
    {
      "name": "destroy",
      "short": "It destroys any pgstream setup, removing the replication slot and all the relevant tables/functions/triggers, along with the internal pgstream schema",
      "use": "destroy",
      "example": "\n\tpgstream destroy --postgres-url <source-postgres-url> --replication-slot <replication-slot-name>\n\tpgstream destroy -c config.yaml\n\tpgstream destroy -c config.env",
      "flags": [
        {
          "name": "postgres-url",
          "description": "Source postgres URL where pgstream destroy will be run",
          "default": ""
        },
        {
          "name": "replication-slot",
          "description": "Name of the postgres replication slot to be deleted by pgstream from the source url",
          "default": ""
        }
      ],
      "subcommands": [],
      "args": []
    },
    {
      "name": "init",
      "short": "Initialises pgstream, creating the replication slot and the relevant tables/functions/triggers under the configured internal pgstream schema",
      "use": "init",
      "example": "\n\tpgstream init --postgres-url <source-postgres-url> --replication-slot <replication-slot-name>\n\tpgstream init -c config.yaml\n\tpgstream init -c config.env",
      "flags": [
        {
          "name": "postgres-url",
          "description": "Source postgres URL where pgstream setup will be run",
          "default": ""
        },
        {
          "name": "replication-slot",
          "description": "Name of the postgres replication slot to be created by pgstream on the source url",
          "default": ""
        }
      ],
      "subcommands": [],
      "args": []
    },
    {
      "name": "run",
      "short": "Run starts a continuous data stream from the configured source to the configured target",
      "use": "run",
      "example": "\n\tpgstream run --source postgres --source-url <source-postgres-url> --target postgres --target-url <target-postgres-url> --init\n\tpgstream run --source postgres --source-url <source-postgres-url> --target postgres --target-url <target-postgres-url> --snapshot-tables <schema.table> --reset\n\tpgstream run --source kafka --source-url <kafka-url> --target elasticsearch --target-url <elasticsearch-url>\n\tpgstream run --source postgres --source-url <postgres-url> --target kafka --target-url <kafka-url>\n\tpgstream run --config config.yaml --log-level info\n\tpgstream run --config config.env",
      "flags": [
        {
          "name": "init",
          "description": "Whether to initialize pgstream before starting replication",
          "default": "false"
        },
        {
          "name": "profile",
          "description": "Whether to expose a /debug/pprof endpoint on localhost:6060",
          "default": "false"
        },
        {
          "name": "replication-slot",
          "description": "Name of the postgres replication slot for pgstream to connect to",
          "default": ""
        },
        {
          "name": "reset",
          "description": "Whether to reset the target before snapshotting (only for postgres target)",
          "default": "false"
        },
        {
          "name": "snapshot-tables",
          "description": "List of tables to snapshot if initial snapshot is required, in the format <schema>.<table>. If not specified, the schema `public` will be assumed. Wildcards are supported",
          "default": "[]"
        },
        {
          "name": "source",
          "description": "Source type. One of postgres, kafka",
          "default": ""
        },
        {
          "name": "source-url",
          "description": "Source URL",
          "default": ""
        },
        {
          "name": "target",
          "description": "Target type. One of postgres, opensearch, elasticsearch, kafka",
          "default": ""
        },
        {
          "name": "target-url",
          "description": "Target URL",
          "default": ""
        }
      ],
      "subcommands": [],
      "args": []
    },
    {
      "name": "snapshot",
      "short": "Snapshot performs a snapshot of the configured source Postgres database into the configured target",
      "use": "snapshot",
      "example": "\n\tpgstream snapshot --postgres-url <postgres-url> --target postgres --target-url <target-url> --tables <schema.table> --reset\n\tpgstream snapshot --config config.yaml --log-level info\n\tpgstream snapshot --config config.env",
      "flags": [
        {
          "name": "dump-file",
          "description": "File where the pg_dump output will be written",
          "default": ""
        },
        {
          "name": "postgres-url",
          "description": "Source postgres database to perform the snapshot from",
          "default": ""
        },
        {
          "name": "profile",
          "description": "Whether to produce CPU and memory profile files, as well as exposing a /debug/pprof endpoint on localhost:6060",
          "default": "false"
        },
        {
          "name": "reset",
          "description": "Whether to reset the target before snapshotting (only for postgres target)",
          "default": "false"
        },
        {
          "name": "tables",
          "description": "List of tables to snapshot, in the format <schema>.<table>. If not specified, the schema `public` will be assumed. Wildcards are supported",
          "default": "[]"
        },
        {
          "name": "target",
          "description": "Target type. One of postgres, opensearch, elasticsearch, kafka",
          "default": ""
        },
        {
          "name": "target-url",
          "description": "Target URL",
          "default": ""
        }
      ],
      "subcommands": [],
      "args": []
    },
    {
      "name": "status",
      "short": "Checks the status of pgstream initialisation and provided configuration",
      "use": "status",
      "example": "\n\tpgstream status -c pg2pg.env\n\tpgstream status --postgres-url <postgres-url> --replication-slot <replication-slot-name>\n\tpgstream status -c pg2pg.yaml --json\n\t",
      "flags": [
        {
          "name": "json",
          "description": "Output the status in JSON format",
          "default": "false"
        },
        {
          "name": "postgres-url",
          "description": "Source postgres URL where pgstream has been initialised",
          "default": ""
        },
        {
          "name": "replication-slot",
          "description": "Name of the postgres replication slot created by pgstream on the source url",
          "default": ""
        }
      ],
      "subcommands": [],
      "args": []
    },
    {
      "name": "tear-down",
      "short": "tear-down is deprecated, please use destroy",
      "use": "tear-down",
      "example": "\n\tpgstream tear-down --postgres-url <source-postgres-url> --replication-slot <replication-slot-name>\n\tpgstream tear-down -c config.yaml\n\tpgstream tear-down -c config.env",
      "flags": [
        {
          "name": "postgres-url",
          "description": "Source postgres URL where pgstream tear down will be run",
          "default": ""
        },
        {
          "name": "replication-slot",
          "description": "Name of the postgres replication slot to be deleted by pgstream from the source url",
          "default": ""
        }
      ],
      "subcommands": [],
      "args": []
    }
  ],
  "flags": [
    {
      "name": "config",
      "shorthand": "c",
      "description": ".env or .yaml config file to use with pgstream if any",
      "default": ""
    },
    {
      "name": "log-level",
      "description": "log level for the application. One of trace, debug, info, warn, error, fatal, panic",
      "default": "debug"
    }
  ]
}
